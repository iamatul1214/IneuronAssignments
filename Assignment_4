1. What exactly is []?
Answer- List is created by putting elements inside []. '[]' represent an empty list.
2. In a list of values stored in a variable called spam, how would you assign the value 'hello' as the third value? (Assume [2, 4, 6, 8, 10] are in spam.)
Answer-spam[2]='hello'
Let's pretend the spam includes the list ['a', 'b', 'c', 'd'] for the next three queries.
3. What is the value of spam[int(int('3' * 2) / 11)]? Answer- 'd', because '3'*2=33 and 33/11 = 3 which is 'd'
4. What is the value of spam[-1]? Answer- 'd'
5. What is the value of spam[:2]? Answer-['a','b']
Let's pretend bacon has the list [3.14, 'cat,' 11, 'cat,' True] for the next three questions.
6. What is the value of bacon.index('cat')?
Answer- 1
7. How does bacon.append(99) change the look of the list value in bacon?
Answer-[3.14, 'cat', 11, 'cat', True, 99]
8. How does bacon.remove('cat') change the look of the list in bacon?
Answer-[3.14, 11, 'cat', True, 99]
9. What are the list concatenation and list replication operators?
Answer- list concatenation operators = '+'  and List replication operators='*'.
10. What is difference between the list methods append() and insert()?
Answer- append() will insert/add the new element in the end of the list whereas insert() will add/insert the element at any particular location.
11. What are the two methods for removing items from a list?
Answer- remove() and pop(), where remove takes the element of list and pop takes the index.
12. Describe how list values and string values are identical.
Answer- String values and list values both can contain the string datatype values. for eg c='cat' and c=['cat'].
13. What's the difference between tuples and lists?
Answer- The major difference is that lists are mutable whereas tuples are immutable.
14. How do you type a tuple value that only contains the integer 42?
Answer-  bacon=(42,) we need to add , after the value.
15. How do you get a list value's tuple form? How do you get a tuple value's list form?
Answer- We can use zip() to do that. for eg-
a=[1,2,3,4]
b=(5,6,7,8)
c=list(zip(a,b))
d=tuple(zip(a,b))
16. Variables that "contain" list values are not necessarily lists themselves. Instead, what do they contain?
Answer- The variables that contain list values are not necessarily lists themselves but they contain the refereces to the list elements.
17. How do you distinguish between copy.copy() and copy.deepcopy()?
Answer- copy.copy() is shallow copy where the changes done will not reflect back to nested elements, where as in copy.deepcopy()
		the changes will be reflected back in the nested elements as well.
		for eg-##example using .copy 

list1=[[1,2,3,4],[5,6,7,8]]
list2=list1.copy()
print(list2)

#Now let's try to modify some list elements
list2[1]=[10,20,30]
print(list1,list2)
#We found that difference in the lists, because both the lists are stored in different memory locations

#Now let's try to modify the nested list elements
list3=list1.copy()
list3[1][1]=1000
print(list1,list3)  #Here we found that change has been reflected to both the lists

#THIS IS CALLED SHALLOW COPYING WHERE THE NESTED LISTS WERE NOT COPIED PROPERLY

#Let's see example of deep copying
import copy
list1=[[1,2,3,4],[5,6,7,8]]
list2=copy.deepcopy(list1)
print(list1,list2)
list2[1][1]="A"
print(list1,list2)

#HERE WE CAN SEE THAT CHANGE HAS BEEN REFLECTED TO ONLY THE LIST2,HENCE IT IS DEEP COPY
